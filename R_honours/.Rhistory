library(adehabitatHR)
install.packages("adehabitatHR")
library("adehabitatHR", lib.loc="~/R/win-library/3.4")
adehabitatHR
library(adehabitatHR)
>head(xy)
xy<-matrix(runif(60), ncol=2)
head(xy)
xysp<-SpatialPoints(xy)
#fnc clusthr, implements single-linkage custering algorithm, using the fnc clusthr on this object of class 'spatialpolygonsdataframe'
clu<-clusthr(xysp)
class(clu)
>plot(clu)
plot(clu)
#consider relocataions of another animal
xy2<-matrix(runif(60), ncol=2)
#bind matrices together
xyt<-rbind(xy, xy2)
#generate a vector containing the ID of the animals for each relocation of the object xyt
id<-gl(2,30)
#convert object id into spatialpointsdataframe
idsp<-data.frame(id)
coordinates(idsp<-xyt)
class(idsp)
# use same fnc clusthr on new object
clu2<-clusthr(idsp)
# use same fnc clusthr on new object
clu2<-clusthr(idsp)
#fnc clusthr, implements single-linkage custering algorithm, using the fnc clusthr on this object of class 'spatialpolygonsdataframe'
clu<-clusthr(xysp)
class(clu)
#show results
plot(clu)
#consider relocataions of another animal
xy2<-matrix(runif(60), ncol=2)
#bind matrices together
xyt<-rbind(xy, xy2)
#generate a vector containing the ID of the animals for each relocation of the object xyt
id<-gl(2,30)
#convert object id into spatialpointsdataframe
idsp<-data.frame(id)
coordinates(idsp<-xyt)
class(idsp)
# use same fnc clusthr on new object
clu2<-clusthr(idsp)
xysp<-SpatialPoints(xy)
# use same fnc clusthr on new object
clu2<-clusthr(idsp)
library(adehabitatHR)
xy
class(xy)
class(idsp)
#generate a vector containing the ID of the animals for each relocation of the object xyt
id<-gl(2,30)
#convert object id into spatialpointsdataframe
idsp<-data.frame(id)
class(idsp)
#convert object id into spatialpointsdataframe
idsp<-data.frame(id)
coordinates(idsp)<-xyt
class(idsp)
# use same fnc clusthr on new object
clu2<-clusthr(idsp)
class(clu2)
clu2
length(clu2)
class(clu2[[1]])
class(clu2[[2]])
plot(clu2)
#-------------Example Dataset-------------------------#
#wildboar ex dataset, load the dataset puechabonsp
data("puechabonsp")
names(puechabonsp)
head(as.data.frame(puechabonsp$relocs))
##map of elevation
image(puechabonsp$map, col=grey(c(1:10/10)))
##map of elevation
image(puechabonsp$map, col=pink(c(1:10/10)))
##map of elevation
image(puechabonsp$map, col=red(c(1:10/10)))
##map of elevation
image(puechabonsp$map, col=grey(c(1:10/10)))
##map of relocations
plot(puechabonsp$relocs, add=TRUE)
##map of relocations
plot(puechabonsp$relocs, add=TRUE
col=as.data.frame(puechabonsp$relocs)[,1])
##map of relocations
plot(puechabonsp$relocs, add=TRUE
col=as.data.frame(puechabonsp$relocs)[,1])
##map of relocations
plot(puechabonsp$relocs, add=TRUE + col=as.data.frame(puechabonsp$relocs)[,1])
##map of relocations
plot(puechabonsp$relocs, add=TRUE, + col=as.data.frame(puechabonsp$relocs)[,1])
##map of relocations
plot(puechabonsp$relocs, add=TRUE,col=as.data.frame(puechabonsp$relocs)[,1])
data("puechabonsp")
data("puechabonsp")
kud<-kernelUD(puechabonsp$relocs[,1], h="href")
kud
#the resulting object is a list of class estUD this class extends the class spatialpixelsdataframe, now containing an additional attribute storing the info about h
#display results
image(kud)
# to get the h-value for the first animal
kud[[1]]@h
kudl<-kernelUD(puechabonsp$relocs[,1], h="LSCV")
image(kudl)
plotLSCV(kudl)
## Example
#The relocations of "Brock"
locs<-puechabonsp$relocs
firs<-locs[as.data.frame(locs[,1]=="Brock")]
#graphical parameters
par(mar=c(0,0,2,0))
par(mfrow=c(2,2))
#estimation of the UD with grid=20 and extent=0.2
image(kernelUD(firs, grid=20, extent=0.2))
## Example
#The relocations of "Brock"
locs<-puechabonsp$relocs
firs<-locs[as.data.frame(locs[,1]=="Brock")]
firs<-locs[as.data.frame(locs)[,1]=="Brock"]
firs<-locs[as.data.frame(locs)[,1]=="Brock",]
#graphical parameters
par(mar=c(0,0,2,0))
par(mfrow=c(2,2))
#estimation of the UD with grid=20 and extent=0.2
image(kernelUD(firs, grid=20, extent=0.2))
title(main="grid=20, extent=o.2")
#estimation of the UD grid with grid=80 and extent=0.2
image(kernelUD(firs, grid=80, extent=0.2))
title(main="grid=20, extent=o.2")
#estimation of the UD grid with grid=20 and extent=3
image(kernelUD(firs, grid=20, extent=3))
title(main="grid=20, extent=o.2")
#estimation of the UD grid with grid=80 and extent=3
image(kernelUD(firs, grid=80, extent=3))
title(main="grid=20, extent=o.2")
#NOte that the paramter 'same4all' is an additional parameter allowing the control of the grid. If it is equal to TRUE, teh same grid is used for all animals....
# Example
kus<- kernelUD(puechabonsp$relocs[,1], same4all=TRUE)
image(kus)
#bc all the UD are est on the same grid, is its possible yo coerce the resulting objct as a 'spatialpixeldataframe'
ii<-estUDm2spixdf(kus)
class(ii)
kudm<-kernelUD(puechabonsp$relocs[,1], grid=puechabonsp$map)
View(clu)
#HR in vector mode
#getverticeshr. to deduce the 90% HR from the UD estimated using the LSCV algorthm
homerange<-getverticeshr(kudl)
class(homerange)
# the resulting object ^ is of the class spatialpolygonsdataframe, as for teh MCP the functions of the package sp and maptools are avail to deal with this object or to export it toward a GIS
#to display hr
plot(homerange, COL=1:4)
#### hr in raster mode
#getvolumeUD useful to sestimate hr in raster mode from the UD, this fnc modifies the UD component of the object passed as argument so that the value of a pixel is equal to the % of the smallest hr containing this pixel
vud<-getvolumeUD(kudl)
vud
#to make clear difference bw the output of kernelUD and getvolumeUD look at teh values on the following counterplot....
#set up graphical parameters
par(mfrow=c(2,1))
par(mar=c(0,0,2,0))
#the output pg kernelUD for the 1st animal
image(kudl[[1]])
title("Output of KernelUD")
##convert into suitable data structure for use of contour
xyz<-as.image.SpatialGridDataFrame(kudl[[1]])
contour(xyz, add=TRUE)
# repeat for output of getvolumeUD
par(mar=c(0,0,2,0))
image(vud[[1]])
# repeat for output of getvolumeUD
par(mar=c(0,0,2,0))
image(vud[[1]])
title("Output of getvolumeUD")
xyzv<-as.image.SpatialGridDataFrame(vud[[1]])
contour(xyzv, add=TRUE)
par(mfrow=c(2,1))
par(mar=c(0,0,2,0))
#the output pg kernelUD for the 1st animal
image(kudl[[1]])
title("Output of KernelUD")
#convert into suitable data structure for use of contour
xyz<-as.image.SpatialGridDataFrame(kudl[[1]])
contour(xyz, add=TRUE)
# repeat for output of getvolumeUD
par(mar=c(0,0,2,0))
image(vud[[1]])
title("Output of getvolumeUD")
xyzv<-as.image.SpatialGridDataFrame(vud[[1]])
contour(xyzv, add=TRUE)
#the output kernelUD is the raw UD, the ouput of getvolumeUD can be used to compute the hr
#store the volume under the UD (as computed by getvolumeUD)
# of the 1st animal in fud
fud<-vud[[1]]
#store the value of the volume under the UD in a vector hr95
hr95<- as.data.frame(fud)[,1]
#if hr95 is <=95 then the pxel belongs to the hr
#take the value 1,0 otherwise
hr95<- as.numeric(hr95<=95)
#convert into dataframe
hr95<- data.frame(hr95)
#covert to a spatialpixelsdataframe
coordinates(hr95)<-coordinates(vud[[1]])
gridded(hr95)<-TRUE
#display results
image (hr95)
ii<-kernel.area(kudl, percent=seq(50, 95, by=5))
ii
